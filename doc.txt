Flask?
- 마이크로한 웹 프레임워크
- 심플하게 확장가능하게 유지하는 것이 가능하다.
- 단일 기능을 제공하는 MSA애플리케이션에 적합하다.
- ORM이 없다. 유연성이 좋다.
- Flask는 지원기능이 적은 만큼 필요한 기능을 구현해야 할 때마다, 별도의 라이브러리를 설치하고, flask 어플리케이션에 바인딩 해주어야 한다.


Basic Factories
- flask에서 순환참조 장애을 대비하기 위해서 사용하는 패턴이다.
- create_app을 이용하면 flask가 run이 되면 자동으로 실행된다.


순환참조 장애
- 파이썬 파일 양쪽에서 서로 import할 때 발생하는 에러이다.


flask shell, flask routes
- orm이나 flask에 대한 접근을 위해서 사용할 수 있다.


리퀘스트 hook
- 리퀘스트가 발생했을 때 전과후에 이벤트 트리거를 통해서 작동하는 것이다.
- 예를 들어 리퀘스트 전에 유저의 세션을 확인하거나, 후에 디비 세션을 닫는 등의 동작을 설정할 수 있다.


application_context
- 앱 컨텍스트
- g와 current_app이 있다.
- 요청이 시작되고 끝날 때 동일한 수명주기를 가진다.
- 요청 안에서 자원을 관리하는 용도로 많이 사용된다.
- current_app은 활성화된 app의 인스턴스이다.
- app에 접근을 할때 편리하게 사용하기 위해서 사용할 수 있다. 앱과의 연결고리이다.


request_context
- 같은 엔드포인트라고 요청되는 메서드에 따라서 응답이 바뀌어야 한다. 서버사이드에서 리퀘스트에 대한 데이터의 접근을 구분할 수 있어야 한다.
- 주요한 리퀘스트 컨텍스트에서는 request와 session이 있다.
- http리퀘스트 컨텐츠를 리퀘스트 컨텍스트를 통해 접근할 수 있다.


Flask WTF와 CSRF 방어
- CSRF 사이트간 요청 위조
- 공격자가 의도한 작업이 웹사이트에서 동작하도록 유도하는 공격이다.
- http는 무상태 비연결성 프로토콜이다.
- 클라이언트단의 정보를 알지 못한다.
- csrf 공격을 방어하기 위하여 필요한 요청마다 특정 토큰을 포함시켜서 요청을 보내는 방식으로 방어할 수 있다.
- wtf의 경우 시크릿키가 등록되어 있어야 한다. flask의 config시크릿키를 이용해서 사용할 수 있다.
- Flask-wtf는 flask에서 form을 좀 더 간편히 사용할 수 있게 해주는 맵핑해주는 모듈이다.


BluePrint
- 라우터 분리 및 처리


flash
- 빠르게 오류를 프론트에 노출시켜주는 기능
- flask에서 제공하는 flash기능을 이용하면 된다.
- flask wtf의 에러 이외에 다른 에러에 대한 통합이 필요하기 때문에 사용한다.


세션
- 비연결성 프로토콜인 http, 요청에 대한 응답을 해준다.
- 연결상태를 유지 하지 않는다. 그렇기 때문에 로그인을 하고서도 계속 해서 로그인을 해주어야 할 수도 있다.
- 브라우저가 로그인을 해도 서버는 누가 로그인 했는지 모른다.
- 그렇기 때문에 서버에서 클라이언트의 상태를 알아야 한다.
- 세션의 경우 서버에 저장되기 때문에 사용자가 많으면 그만큼 세션아이디를 만들어서 관리해야 되고 메모리에 장애가 올수 있다.
- 세션은 flask의 시크릿키를 기반으로 암호화된다.